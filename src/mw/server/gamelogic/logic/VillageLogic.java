package mw.server.gamelogic.logic;

import java.util.Collection;

import mw.server.gamelogic.enums.ActionType;
import mw.server.gamelogic.enums.StructureType;
import mw.server.gamelogic.enums.VillageType;
import mw.server.gamelogic.exceptions.CantUpgradeException;
import mw.server.gamelogic.exceptions.NotEnoughIncomeException;
import mw.server.gamelogic.state.Tile;
import mw.server.gamelogic.state.Unit;
import mw.server.gamelogic.state.Village;

/**
 * 
 * @author emilysager
 *
 */
public class VillageLogic
{

	/**
	 * Get gold generated by a Village Tiles on a given turn
	 * @param pTiles
	 * @return 2 if the Tile has a meadow, 1 otherwise
	 */
	public static int generateGold(Collection<Tile> pTiles)
	{
		int goldGenerated = 0; 
		for (Tile lTile : pTiles)
		{
			goldGenerated += lTile.isMeadowOnTile() ? 2 : 1;
		}
		return goldGenerated; 
	}

	/**
	 * Grow meadows if a peasant has been cultivating one for two turns
	 * @param pTiles
	 */
	public static void generateMeadows(Collection< Tile> pTiles) 
	{
		for (Tile lTile : pTiles)
		{
			if (lTile.hasUnit())
			{
				Unit lUnit = lTile.getUnit(); 
				ActionType lActionType = lUnit.getActionType();
				if (lActionType == ActionType.CULTIVATING_BEGIN)
				{
					lUnit.setActionType(ActionType.CULTIVATING_END);
				}
				if (lActionType == ActionType.CULTIVATING_END)
				{
					lUnit.setActionType(ActionType.READY);
					lTile.setMeadow(true); // put a meadow on the tile
				}
			}
		}
	}
	
	/**
	 * Builds roads if a unit has been building roads for a turn
	 * @param pTiles
	 */
	public static void buildRoads(Collection <Tile> pTiles)
	{
		for (Tile lTile : pTiles)
		{
			if (lTile.hasUnit())
			{
				Unit lUnit = lTile.getUnit();
				ActionType lActionType = lUnit.getActionType();
				if(lActionType == ActionType.BUILDINGROAD)
				{
					lUnit.setActionType(ActionType.READY);
					lTile.setStructureType(StructureType.TREE); 
				}
			}
		}
	}

	/**
	 * Prepares units to move on a new turn
	 * @param pTiles
	 */
	public static void readyUnits(Collection<Tile> pTiles)
	{
		for (Tile lTile : pTiles)
		{
			if (lTile.hasUnit())
			{
				Unit lUnit = lTile.getUnit(); 
				ActionType lActionType = lUnit.getActionType();
				if (lActionType == ActionType.MOVED)
				{
					lActionType = ActionType.READY;
				}
			}
		}
	}

	/**
	 * @param pVillageType
	 * @param pVillage
	 * @throws CantUpgradeException
	 */
	public static void upgradeVillage(Village pVillage, VillageType pVillageType) throws CantUpgradeException, NotEnoughIncomeException
	{
		int upgradeCost = PriceCalculator.getVillageUpgradeCost(pVillageType); 
		if (pVillage.getWood() > upgradeCost)
		{
			switch (pVillageType) {
			case HOVEL:
				pVillage.setVillageType(VillageType.TOWN);
				break;
			case TOWN: 
				pVillage.setVillageType(VillageType.FORT);
				break;
			case FORT: 
			case NO_VILLAGE:
			default:
				throw new CantUpgradeException("[Village] Can not upgrade Village due to requested VillageType.");
			}
			pVillage.addOrSubtractWood(-upgradeCost);
			System.out.println("[Game] Village upgraded successfully with new type " + pVillage.getVillageType() + ", this village has " + pVillage.getWood() + " wood.");
		}
		else throw new NotEnoughIncomeException("Village requires " + upgradeCost + " wood to upgrade." + "This village currently has " + pVillage.getWood() + " wood." ); 
	}

	/**
	 * Pays the gold to villagers
	 * @param pTiles
	 * @param pVillage
	 * @throws NotEnoughIncomeException
	 */
	public static void payVillagers(Collection<Tile> pTiles, Village pVillage) throws NotEnoughIncomeException 
	{
		int totalUpkeepCost = 0; 
		for (Tile lTile : pTiles)
		{
			if (lTile.hasUnit())
			{
				Unit lUnit = lTile.getUnit(); 
				totalUpkeepCost += PriceCalculator.getUpkeepCost(lUnit); 
			}
		}
		if (totalUpkeepCost > pVillage.getGold())
		{
			throw new NotEnoughIncomeException("There is not enough gold for the total upkeep cost of this village. Village will be starved."); 
		}
	}

	/**
	 * 
	 * @param pTiles 
	 */
	public static void clearTombstone(Collection<Tile> pTiles)
	{
		for (Tile lTile : pTiles)
		{
			StructureType lStructureType = lTile.getStructureType(); 
			if(lStructureType == StructureType.TOMBSTONE)
			{
				lTile.setStructureType(StructureType.TREE);
			}	
		}
	}

	/**
	 * Replaces all villagers in a village with tombstones
	 */
	public static void starveVillage(Collection<Tile> pTiles)
	{
		for (Tile lTile : pTiles)
		{
			if (lTile.hasUnit())
			{
				lTile.setUnit(null);
				lTile.setStructureType(StructureType.TOMBSTONE);
			}
		}
	}

}
