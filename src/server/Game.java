package server;

import java.util.ArrayList;



/**
 * Game class definition.
 * Generated by the TouchCORE code generator.
 */
public class Game {
    
    private ArrayList<Player> aPlayers;
    private static GameMap aMap;  //changed this variable to static as it is global... idk if this is right 
    private Player aCurrentPlayer;
    
    public static Game newGame(ArrayList<Player> pPlayers, int mapID, Color colors) {
        for (Player lPlayer : pPlayers) {
            lPlayer.assignColor(colors);
        }
        if (mapID != -1) {
            aMap = GameMap.generateRandomMap();
        } else {
            MapBase.singleton();
            return singleton;
            aMap = invalid.getMap(mapID);
        }
        aMap.partition(colors);
    }

    public void upgradeUnit(Unit u, UnitType newType) {
        boolean success;
        int upgradeCost;
        Village villageRuling;
        Tile tile;
        UnitType unitType;
        unitType = u.getUnitType();
        upgradeCost = PaymentManager.upgradeCost(unitType, newType);
        tile = u.getTile();
        villageRuling = currentPlayer.getVillageRuling(tile);
        success = villageRuling.tryPayingGold(upgradeCost);
    }

    public void beginTurn() {
        Village villages;
        villages = currentPlayer.getVillages();
        for () {
            villages.updateTiles();
            villages.updateUnits();
        }
    }

    public void moveUnit(Unit u, Tile destination) {
        Tile tile;
        Tile path;
        Village village;
        Village villageDest;
        StructureType structureType;
        tile = u.getTile();
        path = aMap.getPath(tile, destination);
        structureType = destination.getStructureType();
        if (structureType==StructureType.TOMBSTONE) {
            destination.setStructureType();
            u.setTile(destination);
        }
        village = tile.getVillage();
        if (structureType==StructureType.TREE) {
            destination.setStructureType();
            u.setTile(destination);
            village.addWood(1);
        }
        villageDest = destination.getVillage();
        if (villageDest==null) {
            village.addTile(destination);
        } else {
            
        }
    }

    public void takeoverTile(Tile dest, Village invadingVillage) {
        Village invadedVillage;
        boolean canFuse;
        int aWood;
        StructureType structureType;
        int aGold;
        invadedVillage = dest.getVillage();
        structureType = dest.getStructureType();
        if (invadedVillage.getCapital().equals(dest)) {
            aGold = invadedVillage.getAGold();
            invadingVillage.addGold(aGold);
            aWood = invadedVillage.getAWood();
            invadingVillage.addWood(aWood);
            dest.setStructureType();
        }
        dest.setVillage(invadingVillage);
        invadedVillage.removeTile(dest);
        invadingVillage.addTile(dest);
        canFuse = invadingVillage.canFuse();
        if (canFuse) {
            invalid();
        }
    }

    public void buildRoad(Unit u) {
        UnitType unitType;
        unitType = u.getUnitType();
        if (unitType == UnitType.PEASANT) {
            u.setActionType(ActionType.BUILDINGROAD);
        }
    }

    public void upgradeVillage(Village v, VillageType newType) {
        v.upgradeVillage(newType);
    }

    public void takeOverTile(Tile dest, Village invadingVillage) {
        int aWood;
        StructureType structureType;
        boolean canFuse;
        Village invadedVillage;
        Tile capital;
        int aGold;
        invadedVillage = dest.getVillage();
        structureType = dest.getStructureType();
        capital = invadedVillage.getCapital();
        if (dest.equals(capital)) {
            aGold = invadedVillage.getAGold();
            invadingVillage.addGold(aGold);
            aWood = invadedVillage.getAWood();
            invadingVillage.addWood(aWood);
            dest.setStructureType(StructureType.NO_STRUCT); //should this be no struct? The invading village already has a structure type
        }
        dest.setVillage(invadingVillage);
        invadingVillage.addTile(dest);
        invadedVillage.removeTile(dest);
        canFuse = invadingVillage.canFuse();
        if (canFuse) {
            invadingVillage.fuse();
        }
    }
}
